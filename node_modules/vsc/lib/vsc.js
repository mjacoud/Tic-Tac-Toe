var fs = require('fs');
var util = require('util'); 
var path = require('path');

var ConfigError = require('./error');

//
// CONST
//

var SETTER_ERROR_MESSAGE = 'Property can not be set. This is config property.';
var SETTER_GENERATE_ERROR = 'Bad setter message type format';
var CONFIG_GENERATE_ERROR = 'Bad JSON-file format';
var DEFAULT_OPTIONS = {
  encoding: 'UTF8',
  setterMessageType: 'Error',
  pathDependence: 'module'
};

//
// Constructor
//

var Config = function(filePath, options){
  var _this = this;
  var err;

  var _options = Object.create(DEFAULT_OPTIONS);
  if(options){
    for(var option in options){
      //_this.options[option] = options[option];
      _options[option] = options[option];
    }
  }

  var _path;
  if(_options.pathDependence === 'module'){
    _path = getParentModulePath(filePath);
  }
  else if(_options.pathDependence === 'file'){
    _path = getParentScriptPath(filePath)
  }
  else{
    err = new ConfigError('Bad option pathDependence = "<%1>"'
      .replace('<%1>', _options.pathDependence));
    throw err;
  }

  if(!fs.existsSync(_path)){
    err = new ConfigError('Can not find configuration file by path "<%1>"'
      .replace('<%1>', _path));
    throw err;
  }

  var parsedConfig = parseJsonFile(_path, _options.encoding);
  for(var property in parsedConfig){
    _this[property] = parsedConfig[property];
  }

  hideProperties(_this, _options.setterMessageType);
};

module.exports = Config;

//
// functions declaration path
//

function hideProperties(obj, setterMessageType){
  // check object type
  if(isSimpleType(obj)){
    return;
  }
  else if(typeof(obj) === 'object'){
    // create property object for hiding all properties
    Object.defineProperty(
      obj,
      '_hidden',
      {
        value: {},
        writable : false,
        configurable : false,
        enumerable : false
      }
    );
    // copy obj.<property> -> obj._hidden.<property>
    // rewrite obj.<property> as getter/setter
    //   obj.<property>.get() return obj._hidden.<property>
    //   obj.<property>.set() call canNotBeSet()
    for(var key in obj){
      Object.defineProperty(
        obj._hidden,
        key,
        {
          value: obj[key],
          writable : true,
          configurable : true,
          enumerable : true
        }
      );
      Object.defineProperty(
        obj,
        key,
        {
          get : commonGetter(obj, key),
          set : commonSetter(setterMessageType),
          configurable : false,
          enumerable : true
        }
      );
      // recurs
      hideProperties(obj._hidden[key], setterMessageType);
    }
    
    Object.defineProperty(
      obj,
      'inspect',
      {
        value: function(depth){
          return util.inspect(obj._hidden, {depth : depth});
        },
        enumerable : false
      }
    );
    return;
  }
  else {
    var err = new ConfigError('bad format');
    throw err;
  }
}

function parseJsonFile(path, encoding){
  var jsonConfig = fs.readFileSync(path, { encoding : encoding });
  return JSON.parse(jsonConfig);
}

function commonGetter(object, propertyName){
  //console.log('create get-method for property ' + propertyName);
  return function(){
    return object._hidden[propertyName];
  }
}

function commonSetter(setterMesageType){
  return function(){
    canNotBeSet(setterMesageType);
  }
}

function canNotBeSet(setterMesageType){
  if(setterMesageType.toUpperCase() === 'ERROR'){
    throw new ConfigError(SETTER_ERROR_MESSAGE);
  }
  else if(setterMesageType.toUpperCase() === 'CONSOLE'){
    console.log(SETTER_ERROR_MESSAGE);
  }
  else{
    var err = new ConfigError(SETTER_GENERATE_ERROR+' \''+setterMesageType+'\'');
    throw err;
  }
}

function isSimpleType(variable){
  return typeof(variable) === 'string' ||
    typeof(variable) === 'boolean' ||
    typeof(variable) === 'number';
}

function getParentModulePath(filePath){
  return path.resolve(path.dirname(module.parent.parent.filename), filePath);
}

function getParentScriptPath(filePath){
  var v8PrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = function(error, structuredStackTrace){
    return structuredStackTrace;
  };
  var structuredStackTrace = {};
  Error.captureStackTrace(structuredStackTrace);
  var v8StackTrace = structuredStackTrace.stack;
  Error.prepareStackTrace = v8PrepareStackTrace;

  // up on 2 level at stack
  // [0] - <MODOLE_DIR>/index.js
  // [1] - <MODOLE_DIR>/lib/vsc.is
  // [2] - parent script file path
  return path.resolve(path.dirname(v8StackTrace[2].getFileName()), filePath);
}